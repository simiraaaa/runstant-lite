editor
  .inner.z-depth-4
    .header
      ul.tabs
        li.tab.col.s3#tab-html
          a(data-type='html', href='#editor-html')
            span.type html
            span.lang {runstant.project.data.code.html.type}
        li.tab.col.s3#tab-style
          a(data-type='style', href='#editor-style')
            span.type style
            span.lang {runstant.project.data.code.style.type}
        li.tab.col.s3#tab-script
          a(data-type='script', href='#editor-script')
            span.type script
            span.lang {runstant.project.data.code.script.type}

    .content
      //- #editor
      #editor-html.editor-unit html
      #editor-style.editor-unit style
      #editor-script.editor-unit script

    btn-fullscreen(query='editor')

  style.
    editor .header {
      margin-bottom: 1px;
      height: 32px;
    }
    editor .content {
      position: relative;
      width: 100%;
      height: calc(100% - 36px);
      top: 3px;
    }
    #editor, #editor-html, #editor-style, #editor-script {
      width: 100%;
      height: 100%;
      position: absolute;
    }

    editor .tabs {
      background-color: hsl(0, 0%, 27%);
      height: 36px;
    }
    editor .tabs .tab {
      height: 36px;
      line-height: 36px;
    }

    editor .tabs .indicator {
    /*
      background: hsl(60, 100%, 60%);
      */
    }


    @media only screen and (min-width: 601px) {
      editor .tabs li.tab .lang {
        font-size: x-small;
      }

      editor .tabs li.tab .lang:before {
        content: '(';
      }
      editor .tabs li.tab .lang:after {
        content: ')';
      }
    }
    @media only screen and (max-width: 600px) {
      editor .tabs li.tab span.type {
        display: none;
      }
    }
  script.
    var self = this;

    this.root.style.width = opts.width;
    this.root.style.height = opts.height;
    this.root.style.float = opts.float;

    this.editors = {};

    this.on('mount', function() {
      $('editor ul.tabs').tabs();

      this.initEditor('html');
      this.initEditor('style');
      this.initEditor('script');

      this.refresh();
      this.setup();

      this.changeCurrentTab(runstant.project.data.setting.current);

      this.updateMode();
    });

    this.changeCurrentTab = function(type) {
      // タブに反映
      $('editor ul.tabs').tabs('select_tab', 'editor-' + type);
      this.editors[type].focus();
    };


    this.initEditor = function(type) {
      var editor = this.editors[type] = new runstant.Editor('editor-' + type);

      editor.onsave = function() {
        opts.onsave && opts.onsave();
      };

      // test
      editor.setFontSize(14);
      editor.setTheme('ace/theme/monokai');

      ['html', 'style', 'script'].forEach(function(type, i) {
        var index = (i+1);
        var key = 'Alt-' + index;

        editor.addCommand({
          name: type,
          bindKey: { mac: key, win: key, },
          exec: function() { self.changeCurrentTab(type); }
        });
      });

    };

    this.refresh = function() {
      ['html', 'style', 'script'].forEach(function(type) {
        var editor = this.editors[type];
        var code = runstant.project.data.code[type];
        editor.setValue(code.value);
        editor.editor.moveCursorTo(0, 0);
      }, this);
    };

    /*
     * エディタの内容を保存
     */
    this.saveCode = function() {
      var project = runstant.project;
      // update value
      for (var key in this.editors) {
        var editor = this.editors[key];
        var code = project.data.code[key];
        var v = editor.getValue();
        code.value = v;
      }

      // update current
      var current = $('ul.tabs').find("a.active").data('type');
      project.data.setting.current = current;
    };

    this.setup = function() {
      var user = runstant.user;
      for (var key in this.editors) {
        var editor = this.editors[key];
        editor.setFontSize(user.data.fontSize);
        editor.setTabSize(user.data.tabSize);
        editor.setTheme(user.data.theme);
        editor.setKeyboardHandler(user.data.keyBinding);
      }
    };

    this.updateMode = function() {
      this.editors.$forIn(function(type, editor) {
        var mode = runstant.project.data.code[type].type;
        editor.setMode(mode);
      });
    };



